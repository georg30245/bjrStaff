//Виды сборок
//
//Inventory			 - Инвентаризация (контроль уценки и маркировки, можно превышать учетные количества)
//AcceptanceOfGoods	 - Приёмка от поставщика (Никакого контроля, только на "кривые"  шк)
//WebOrder			 - Интернет заказ (контроль уценки, маркировки, количества)
//ProductAssembly	 - Сборка товара (контроль уценки, маркировки, количества)
//Marking			 - Маркировка (Контроль на присутствие)
//BarcodeQuantity	 - Режим шк-количество (никакого контроля, что набьют то в том виде и получат)

#Область СозданиеСборок

Функция СоздатьШаблонСборки(Название, ВидДокумента)
	
	Сборка				 = Документы.Сборка.СоздатьДокумент();
	Сборка.Дата			 = ТекущаяДата();
	Сборка.Название		 = Название;
	Сборка.ВидДокумента	 = ВидДокумента;
	Сборка.Магазин		 = ОбщегоНазначения_Сервер.ПолучитьТекущийМагазин();

	Возврат Сборка;
	
КонецФункции

Функция СоздатьСборку_Инвентаризация(Название, ГруппыТоваров = Неопределено, Документ = Неопределено) Экспорт
	
	Сборка = СоздатьШаблонСборки(Название, "Inventory");
	
	Если ГруппыТоваров <> Неопределено Тогда
		Сборка.НоменклатурныеГруппы.Загрузить(ГруппыТоваров);
	КонецЕсли;
	
	Если Документ <> Неопределено Тогда
		Сборка.ДокументВыгрузки = Документ;
	КонецЕсли;
	
	Сборка.Записать();
	
	Возврат Сборка;
	
КонецФункции

Функция СоздатьСборку_Приёмка(Название, ДокументыПриёмки) Экспорт
	
	Сборка = СоздатьШаблонСборки(Название, "AcceptanceOfGoods");
	
	Для Каждого Док Из ДокументыПриёмки Цикл
		НС = Сборка.ДокументыПриёмки.Добавить();
		НС.Документ = Док;
	КонецЦикла;
	
	Сборка.Записать();
	
	Возврат Сборка;
	
КонецФункции

Функция СоздатьСборку_ИнтернетЗаказ(Название, докЗаказ) Экспорт
	
	Сборка					 = СоздатьШаблонСборки(Название, "WebOrder");
	Сборка.ДокументВыгрузки	 = докЗаказ;
	Сборка.Записать();
	
	Возврат Сборка;
	
КонецФункции

Функция СоздатьСборку_СборкаТовара(Название, докСборка) Экспорт
	
	Сборка					 = СоздатьШаблонСборки(Название, "ProductAssembly");
	Сборка.ДокументВыгрузки	 = докСборка;
	Сборка.Записать();
	
	Возврат Сборка;
	
КонецФункции

Функция СоздатьСборку_Маркировка() Экспорт
	
	Сборка = СоздатьШаблонСборки("Маркировка " + Формат(ТекущаяДата(), "ДФ=dd.MM.yy"), "Marking");
	Сборка.Записать();
	
	Возврат Сборка;
	
КонецФункции

Функция СоздатьСборку_ШтрихкодКоличество(Название) Экспорт
	
	Сборка = СоздатьШаблонСборки(Название + Формат(ТекущаяДата(), "ДФ=dd.MM.yy"), "BarcodeQuantity");
	Сборка.Записать();
	
	Возврат Сборка;
	
КонецФункции

#КонецОбласти


#Область Сверка

Функция СформироватьТелоСборкиДляЗапроса_Сверка(Сборка) Экспорт 
	
	Результат = Новый Структура;
	
	ВидДока = Сборка.ВидДокумента;
	Результат.Вставить("type", ВидДока);
	
	МассивТоваров = Новый Массив;
	
	//Для Каждого Строчка Из Сборка.Товары Цикл
	//	МассивТоваров.Добавить(Новый Структура("barcode,count",Строчка.Штрихкод,Строчка.Количество));
	//КонецЦикла;
	//Результат.Вставить("data", МассивТоваров);
	
	Если ВидДока = "AcceptanceOfGoods" Тогда
		
		Результат.Вставить("acceptanceDocuments", Сборка.ДокументыПриёмки.Выгрузить().ВыгрузитьКолонку("Документ"));
		
	ИначеЕсли ВидДока = "WebOrder" ИЛИ ВидДока = "ProductAssembly" Тогда
		
		Результат.Вставить("idDoc", Сборка.ДокументВыгрузки);
		
	ИначеЕсли ВидДока = "Inventory" Тогда
		
		Результат.Вставить("idDoc", Сборка.ДокументВыгрузки);
		
		МассивГрупп = Новый Массив;
		Для Каждого Строчка Из Сборка.НоменклатурныеГруппы Цикл
			МассивГрупп.Добавить(Строчка.Группа.Код);
		КонецЦикла;
		
		Результат.Вставить("groups", МассивГрупп);
		
	КонецЕсли;
	
	Возврат ОбщегоНазначения_Сервер.Сериализовать(Результат);
	
КонецФункции

Функция ВыполнитьСверкуДанныхСЦентром(Сборка) Экспорт 
	
	ТелоЗапроса = СформироватьТелоСборкиДляЗапроса_Сверка(Сборка);
	
	Результат = api.СверитьДанныеПоСборке(ТелоЗапроса);
	
	Если ТипЗнч(Результат) = Тип("Структура") и Результат.Свойство("Ошибка") Тогда
		Сообщить(Результат.Ошибка);
	Иначе
		ЗаполнитьДанныеСверки(Сборка, Результат);
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДанныеСверки(Сборка, МассивСверка)
	
	//v 2.0
	//Если Сборка.ВидДокумента = "AcceptanceOfGoods" ИЛИ Сборка.ВидДокумента = "WebOrder"  ИЛИ Сборка.ВидДокумента = "ProductAssembly"  ИЛИ Сборка.ВидДокумента = "Inventory" ТОгда
	
	тзРезультат = Новый ТаблицаЗначений;
	тзРезультат.Колонки.Добавить("Штрихкод");
	тзРезультат.Колонки.Добавить("Название");
	тзРезультат.Колонки.Добавить("Количество");
	тзРезультат.Колонки.Добавить("КоличествоУчет");
	тзРезультат.Колонки.Добавить("Комментарий");
	тзРезультат.Колонки.Добавить("Штрихкоды");
	тзРезультат.Колонки.Добавить("Идентификатор");
	тзРезультат.Колонки.Добавить("СпецШтрихкод");
	
	Для Каждого Элемент Из МассивСверка Цикл
		НС					 = тзРезультат.Добавить();
		//НС.Штрихкод		 = Элемент.barcode;
		НС.Название			 = Элемент.good;
		//НС.Количество		 = Элемент.actQuantity;
		НС.КоличествоУчет	 = Элемент.regQuantity;
		НС.Идентификатор	 = Элемент.id;
		НС.Комментарий		 = ?(Элемент.error = "", "", "error" + Элемент.error);
		НС.Штрихкоды		 = ОбщегоНазначения_Сервер.Сериализовать(Элемент.barcodes);
	КонецЦикла;
	
	обСборка = Сборка.ПолучитьОбъект();
	обСборка.Товары.Загрузить(тзРезультат);
	обСборка.Записать();
	
	//КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти



#Область ПолучениеДокументовВРаботе

Функция ПолучитьПТУВСборках() Экспорт 
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	СборкаДокументыПриёмки.Документ КАК Документ
	|ИЗ
	|	Документ.Сборка.ДокументыПриёмки КАК СборкаДокументыПриёмки
	|ГДЕ
	|	НЕ СборкаДокументыПриёмки.Ссылка.ПометкаУдаления
	|	И НЕ СборкаДокументыПриёмки.Ссылка.ВыгруженВЦентр
	|	И СборкаДокументыПриёмки.Ссылка.ВидДокумента = ""[ВидДока]""");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "[ВидДока]", "AcceptanceOfGoods");
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Документ");

КонецФункции

Функция ПолучитьЗаказыВСборках() Экспорт 
	
	Возврат ПолучитьДокументыВРаботе("webOrder");

КонецФункции

Функция ПолучитьИнвентаризацииВСборках() Экспорт
	
	Возврат ПолучитьДокументыВРаботе("Inventory");
	
КонецФункции

Функция ПолучитьСборкиВРаботе() Экспорт
	
	Возврат ПолучитьДокументыВРаботе("ProductAssembly");
	
КонецФункции

Функция ПолучитьДокументыВРаботе(ВидДокумента)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Сборка.ДокументВыгрузки КАК ДокументВыгрузки
	|ИЗ
	|	Документ.Сборка КАК Сборка
	|ГДЕ
	|	НЕ Сборка.ПометкаУдаления
	|	И НЕ Сборка.ВыгруженВЦентр
	|	И Сборка.ВидДокумента = ""[ВидДока]""");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "[ВидДока]", ВидДокумента);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДокументВыгрузки");
	
КонецФункции

#КонецОбласти



#Область ОтработкаСборок

Процедура ОтработатьСборку(Сборка) Экспорт 
	
	ТелоЗапроса = СформироватьТелоЗапроса_ОтработкаСборки(Сборка);
	
	Результат = api.ОтработатьДанныеПоСборке(ТелоЗапроса);
	
	Если ТипЗнч(Результат) = Тип("Структура") и Результат.Свойство("Ошибка") Тогда
		Сообщить(Результат.Ошибка);
	Иначе
		Сообщить(Результат.report);
		ПометитьСборкуКакНеактивную(Сборка);
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьТелоЗапроса_ОтработкаСборки(Сборка)
	
	Результат = Новый Структура;
	
	ВидДока = Сборка.ВидДокумента;
	Результат.Вставить("type", ВидДока);
	
	Если ВидДока = "Marking" Тогда
		
		МассивМаркировки = Новый Массив;
		Для Каждого Строчка Из Сборка.Маркировка Цикл
			Если Не Строчка.Отработан Тогда
				Продолжить;
			КонецЕсли;
			
			МассивМаркировки.Добавить(Строчка.КодМаркировки);
		КонецЦикла;
		
		Результат.Вставить("mark", МассивМаркировки);
		
	ИначеЕсли ВидДока = "BarcodeQuantity" Тогда
		
		МассивТоваров = Новый Массив;
		
		Для Каждого Строчка Из Сборка.Товары Цикл
			МассивТоваров.Добавить(Новый Структура("barcode,count",Строчка.Штрихкод,Строчка.Количество));
		КонецЦикла;
		
		ТекстЗадачи = Новый Структура;
		ТекстЗадачи.Вставить("data", МассивТоваров);
		ТекстЗадачи.Вставить("comment", Сборка.Название);
		
		Результат.Вставить("text", ТекстЗадачи);
	Иначе
		
		МассивТоваров = Новый Массив;
		
		Для Каждого Строчка Из Сборка.Товары Цикл
			МассивТоваров.Добавить(Новый Структура("barcode,count,id",Строчка.Штрихкод,Строчка.Количество,Строчка.Идентификатор));
		КонецЦикла;
		Результат.Вставить("data", МассивТоваров);
		
	КонецЕсли;
	
	Если ВидДока = "AcceptanceOfGoods" Тогда
		
		Результат.Вставить("acceptanceDocuments", Сборка.ДокументыПриёмки.Выгрузить().ВыгрузитьКолонку("Документ"));
		
		МассивБрака = Новый Массив;
		Для Каждого Строчка Из Сборка.БракованыеТовары Цикл
			МассивБрака.Добавить(Новый Структура("barcode,			description,	  quantity,			  photo",
												  Строчка.Штрихкод, Строчка.Описание, Строчка.Количество, Base64Строка(Строчка.Фотография.Получить())));
		КонецЦикла;
		
		Результат.Вставить("defect", МассивБрака);
		
	ИначеЕсли ВидДока = "WebOrder" ИЛИ ВидДока = "ProductAssembly" Тогда
		Результат.Вставить("idDoc", Сборка.ДокументВыгрузки);
		Результат.Вставить("mark", ПолучитьМассивМаркировкиСборки(Сборка));
	ИначеЕсли ВидДока = "Inventory" Тогда
		Результат.Вставить("idDoc", Сборка.ДокументВыгрузки);
		Результат.Вставить("comment", Сборка.Название);
		
		МассивГрупп = Новый Массив;
		Для Каждого Строчка Из Сборка.НоменклатурныеГруппы Цикл 
			МассивГрупп.Добавить(Строчка.Группа.Код);
		КонецЦикла;
		
		Результат.Вставить("groups", МассивГрупп);
		
		Результат.Вставить("mark", ПолучитьМассивМаркировкиСборки(Сборка));
		
	КонецЕсли;
	
	Возврат ОбщегоНазначения_Сервер.Сериализовать(Результат);

КонецФункции

Функция ПолучитьМассивМаркировкиСборки(Сборка)
	
	Массив = Новый Массив;
	
	Для Каждого Строчка Из Сборка.МаркированныйТовар Цикл
		Массив.Добавить(Новый Структура("good,mark,fullMark",Строчка.Идентификатор,Строчка.КодМаркировки,Строчка.ПолныйКод));
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

Процедура ПометитьСборкуКакНеактивную(Сборка) Экспорт
	обСборка = Сборка.ПолучитьОбъект();
	обСборка.ВыгруженВЦентр = Истина;
	обСборка.Записать();
КонецПроцедуры

#КонецОбласти

#Область Маркировка

Функция ЗаполнитьМаркировку(Сборка) Экспорт
	
	Результат = api.ПолучитьМаркировкуНаМагазине();
	
	Если ТипЗнч(Результат) = Тип("Структура") и Результат.Свойство("Ошибка") Тогда
		Сообщить(Результат.Ошибка);
	Иначе
		ЗаполнитьМаркировкуВДокумент(Сборка, Результат);
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьМаркировкуВДокумент(Сборка, Результат)
	
	Об = Сборка.ПолучитьОбъект();
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("КодМаркировки");
	ТЗ.Колонки.Добавить("Название");
	ТЗ.Колонки.Добавить("Идентификатор");
	ТЗ.Колонки.Добавить("Отработан");
	ТЗ.Колонки.Добавить("ПолныйКод");
	ТЗ.Колонки.Добавить("Штрихкоды");
	
	Для Каждого Эл Из Результат Цикл
		
		НС				 = ТЗ.Добавить();
		НС.КодМаркировки = Эл.code;
		НС.Название		 = Эл.good;
		НС.Идентификатор = Эл.id;		
		ДанныеИзСборки	 = ДанныеВСборкеПоМаркировке(Эл.code, Сборка);
		НС.Отработан	 = ДанныеИзСборки.Отработан;
		НС.ПолныйКод	 = ДанныеИзСборки.ПолныйКод;
		НС.Штрихкоды 	 = ОбщегоНазначения_Сервер.Сериализовать(Эл.barcodes);
		
	КонецЦикла;
	
	Об.Маркировка.Загрузить(ТЗ);
	Об.Маркировка.Сортировать("Отработан");
	
	Об.Записать();
	
КонецПроцедуры

Функция ДанныеВСборкеПоМаркировке(КодМ, Сборка)
	
	Результат = Новый Структура("Отработан, ПолныйКод", Ложь, "");
	
	НужныеСтроки = Сборка.Маркировка.НайтиСтроки(Новый Структура("КодМаркировки", КодМ));
	
	Для Каждого Строчка Из НужныеСтроки Цикл
		
		Результат.Отработан = Строчка.Отработан;
		Результат.ПолныйКод = Строчка.ПолныйКод;
		Прервать;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции                                                                  

Функция ПолучитьТекущийДокумент_Маркировка() Экспорт
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	Сборка.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.Сборка КАК Сборка
		|ГДЕ
		|	Сборка.ВидДокумента = ""Marking""
		|	И НЕ Сборка.ВыгруженВЦентр
		|	И НЕ Сборка.ПометкаУдаления");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Результат = Выборка.Ссылка;
		Прервать;
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

Функция НормироватьКомментарий(пКомментарий) Экспорт 
	
	Возврат Сред(пКомментарий, 6, СтрДлина(пКомментарий));
	
КонецФункции

Процедура УдалитьСборку(Сборка) Экспорт 
	
	Об = Сборка.ПолучитьОбъект();
	Об.УстановитьПометкуУдаления(Истина);
	Об.Записать();
	
КонецПроцедуры

Функция КонтроллироватьФактическоеКоличество(Сборка) Экспорт 
	
	Результат = Ложь;
	
	Если Сборка.ВидДокумента = "WebOrder" Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПроставитьКомментарииСогласноКоличеству(Сборка) Экспорт 
	
	об = сборка.ПолучитьОбъект();
	
	Для Каждого Строчка Из об.Товары Цикл
		
		Если Строчка.Количество = Строчка.КоличествоУчет Тогда
			Строчка.Комментарий = "";
		КонецЕсли;
		
	КонецЦикла;
	
	об.Записать();
	
КонецПроцедуры

Функция ПолучитьСписокТоваровДляУточнения(Сборка) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	СборкаТовары.Штрихкод КАК Штрихкод,
	|	СборкаТовары.Название КАК Название,
	|	СборкаТовары.Штрихкоды КАК Штрихкоды,
	|	СборкаТовары.Количество КАК Факт,
	|	СборкаТовары.КоличествоУчет КАК Учет,
	|	СборкаТовары.Комментарий КАК Комментарий,
	|	СборкаТовары.Идентификатор КАК Идентификатор
	|ИЗ
	|	Документ.Сборка.Товары КАК СборкаТовары
	|ГДЕ
	|	СборкаТовары.Комментарий ПОДОБНО ""%error%""
	|	И СборкаТовары.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Название");
	
	Запрос.УстановитьПараметр("Ссылка", Сборка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ВнестиДанныеПоБраку(Штрихкод, Количество, Описание, ДДСнимок, Сборка, УИД) Экспорт 
	
	об			 = Сборка.ПолучитьОбъект();
	НужныеСтроки = об.БракованыеТовары.НайтиСтроки(Новый Структура("Штрихкод", Штрихкод));
	НС			 = ?(НужныеСтроки.Количество() = 0, об.БракованыеТовары.Добавить(), НужныеСтроки[0]);
	
	НС.Штрихкод		 = Штрихкод;
	НС.Количество	 = Количество;
	НС.Описание		 = Описание;
	
	Адрес = ПоместитьВоВременноеХранилище(ДДСнимок, УИД);
	НС.Фотография	 = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(Адрес));
	
	об.Записать();
	
КонецПроцедуры

Функция ПолучитьИДТовараПоШтрихкоду(пШтрихкод, Сборка) Экспорт 
	
	Результат = Неопределено;
	
	Для Каждого Строчка Из Сборка.Товары Цикл
		
		МассивШК = ОбщегоНазначения_Сервер.ДеСериализовать(Строчка.Штрихкоды);
		
		Индекс = МассивШК.Найти(пШтрихкод);
		
		Если Индекс <> Неопределено Тогда
			Результат = Строчка.Идентификатор;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции