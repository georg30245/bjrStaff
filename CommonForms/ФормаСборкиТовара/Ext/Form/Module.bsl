
&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	//Сообщить("Источник - " + Источник);
	//Сообщить("Событие - " + Событие);
	//Сообщить("Данные - " + Данные);
	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;
	
	Если Строка(Событие) = "Штрихкод" Тогда
		
		ВнешнееСобытиеШтрихкод(Данные);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытиеШтрихкод(Данные)
	
	Если ЭтаФорма.Элементы.Страницы.ТекущаяСтраница = ЭтаФорма.Элементы.СтраницаОснова Тогда
		//ОбработатьВводШтрихкода_Товары(ОбщегоНазначения_Сервер.НормироватьШтрихкод(Данные));
		ОбработатьВведённыйШК_Товары(ОбщегоНазначения_Сервер.НормироватьШтрихкод(Данные));
	ИначеЕсли ЭтаФорма.Элементы.Страницы.ТекущаяСтраница = ЭтаФорма.Элементы.СтраницаБрак Тогда
		ОбработатьВводШтрихкода_ТоварыБрак(ОбщегоНазначения_Сервер.НормироватьШтрихкод(Данные));
	ИначеЕсли ЭтаФорма.Элементы.Страницы.ТекущаяСтраница = ЭтаФорма.Элементы.СтраницаМаркировка Тогда
		ОбработатьВводШтрихкода_Маркировка(ОбщегоНазначения_Сервер.НормироватьШтрихкод(Данные));
	ИначеЕсли ЭтаФорма.Элементы.Страницы.ТекущаяСтраница = ЭтаФорма.Элементы.СтраницаВводМаркировки Тогда
		ОбработатьВведённуюМаркировкуПоТовару(Данные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВводШтрихкода_Маркировка(пШтрихкод)
	
	ВвестиКодМаркировкиВДокумент(МенеджерОборудования_Клиент.НормироватьКодDataMatrix(пШтрихкод), пШтрихкод);
	ОбновитьТаблицуМаркировка();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВводШтрихкода_ТоварыБрак(пШтрихкод)
	
	ОткрытьФорму("ОбщаяФорма.ФормаВводаБрака", Новый Структура("Сборка, Штрихкод, Количество", Сборка, пШтрихкод, 0),,,,,Новый ОписаниеОповещения("ЗакрытиеФормыВводаБрака", ЭтаФорма));//Добавить описание оповещения
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеФормыВводаБрака(Результат, ДопПараметры) Экспорт 
	
	ЗаполнитьТоварыБрак();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаКоличестваТовара_ИД(ВведённоеЧисло, ДопПараметры) Экспорт
	
	Если ВведённоеЧисло <= 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВнестиДанныеПоТоварам(ДопПараметры.ИД, ВведённоеЧисло, "Идентификатор");
	ОбновитьДанныеПоТоварам();
			
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаКоличестваТовара_ШК(ВведённоеЧисло, ДопПараметры) Экспорт
	
	Если ВведённоеЧисло <= 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьВводПозиции(текШтрихкод, ВведённоеЧисло);
		
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//Если маркировка - документ определяем по факту. Есть невыгруженный - берём его, нет - создаём
	Если Параметры.ТипДокумента = "Маркировка" Тогда
		лСборка = УправлениеСборками_Сервер.ПолучитьТекущийДокумент_Маркировка();
		
		Если Не ЗначениеЗаполнено(лСборка) Тогда
			лСборка = УправлениеСборками_Сервер.СоздатьСборку_Маркировка().Ссылка;
		КонецЕсли;
		
		Сборка = лСборка;
	Иначе
		Сборка = Параметры.Сборка;
	КонецЕсли;
	
	ТипДокумента				 	 = Параметры.ТипДокумента;
	_КонтрольМаркировки				 = Параметры._КонтрольМаркировки;
	_КонтрольФактическогоКоличества	 = Параметры._КонтрольФактическогоКоличества;	
	
	
	ПараметрыСборки	 = ОбщегоНазначения_Сервер.ДеСериализовать(Константы.НастройкиСборки.Получить());	
	ПараметрыСканера = ОбщегоНазначения_Сервер.ДеСериализовать(Константы.ПараметрыСканераШтрихкодовAndroid.Получить());
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	НачальноеЗаполнение();	
	МенеджерОборудования_Клиент.УстановитьКомпонентуСканераШК(ПараметрыСканера);
	//МенеджерОборудования_Клиент.ПодключитьКомпоненту();
КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	НачальноеЗаполнение();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьЭлементов(ВидСборки)
	
	Элементы.СтраницаВводМаркировки.Видимость	 = Ложь;
	Элементы.СтраницаОснова.Видимость			 = Истина;
	ЭтаФорма.Элементы.Страницы.ТекущаяСтраница = ЭтаФорма.Элементы.СтраницаОснова;
	
	Если ВидСборки = "AcceptanceOfGoods" Тогда
		Элементы.СтраницаБрак.Видимость = Истина;
	ИначеЕсли ВидСборки = "WebOrder" Тогда
		Элементы.ТоварыРазмещение.Видимость = Истина;
	ИначеЕсли ВидСборки = "Marking" Тогда
		ЭтаФорма.Элементы.Страницы.ТекущаяСтраница	 = ЭтаФорма.Элементы.СтраницаМаркировка;
		Элементы.СтраницаМаркировка.Видимость		 = Истина;
		Элементы.СтраницаОснова.Видимость			 = Ложь;
		Элементы.СтраницаОснова.Доступность			 = Ложь;
	ИначеЕсли ВидСборки = "BarcodeQuantity" Тогда
		Элементы.ТоварыНазвание.Видимость = Ложь;
		Элементы.ТоварыКоличествоУчет.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачальноеЗаполнение()
	
	ВидСборки = ПолучитьВидСборки();
	
	ОбновитьВидимостьЭлементов(ВидСборки);
	
	Элементы.ДекорацияСборка.Заголовок = ПолучитьЗаголовок();
	//Элементы.текКоличество.Доступность = НЕ ПараметрыСборки.АвтовводЕдиницы;
	
	Если ВидСборки <> "BarcodeQuantity" Тогда
		ВыполнитьСверку(Ложь);
	КонецЕсли;
		
	Если ВидСборки = "AcceptanceOfGoods" Тогда
		//Элементы.СтраницаБрак.Видимость = Истина;
		_РазрешеноДобавлятьСтроки = Истина;
		ЗаполнитьТоварыБрак();
	ИначеЕсли ВидСборки = "Inventory" Тогда
		_РазрешеноДобавлятьСтроки = Истина;
		_ОбработкаСпецШК = Истина;
		ВыполнитьСверку();
	ИначеЕсли ВидСборки = "WebOrder" Тогда
		ЗаполнитьТоварыСервер_ИнтернетЗаказ();
		//Элементы.ТоварыРазмещение.Видимость = Истина;
	ИначеЕсли ВидСборки = "ProductAssembly" Тогда
		ЗаполнитьТоварыСервер_СборкаТовара();
	ИначеЕсли ВидСборки = "Marking" Тогда
		////ЭтаФорма.Элементы.Страницы.ТекущаяСтраница	 = ЭтаФорма.Элементы.СтраницаМаркировка;
		////Элементы.СтраницаМаркировка.Видимость		 = Истина;
		////Элементы.СтраницаОснова.Видимость			 = Ложь;
		////Элементы.СтраницаОснова.Доступность			 = Ложь;
		УправлениеСборками_Сервер.ЗаполнитьМаркировку(Сборка);
		ОбновитьТаблицуМаркировка();
	ИначеЕсли ВидСборки = "BarcodeQuantity" Тогда
		Элементы.ТоварыНазвание.Видимость = Ложь;
		//Элементы.ТоварыКоличествоУчет.Видимость = Ложь;
	КонецЕсли;
	
	ОбновитьДанныеПоТоварам();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТоварыСервер_СборкаТовара()
	
	Данные = API.ПолучитьТоварыДляСборки(ОбщегоНазначения_Сервер.Сериализовать(Новый Структура("type, doc","ProductAssembly", Сборка.ДокументВыгрузки)));
	
	ДоступнаяМаркировка.Очистить();
	тзМаркированныеТоварыЗаказа = Новый ТаблицаЗначений;
	тзМаркированныеТоварыЗаказа.Колонки.Добавить("Идентификатор");
	
	Для Каждого Строчка Из Данные.marks Цикл
		НС = ДоступнаяМаркировка.Добавить();
		НС.Идентификатор = Строчка.id;
		НС.КодМаркировки = Строчка.code;
		
		НС = тзМаркированныеТоварыЗаказа.Добавить();
		НС.Идентификатор = Строчка.id;
	КонецЦикла;
	
	тзМаркированныеТоварыЗаказа.Свернуть("Идентификатор");
	МаркированныеТовары.Загрузить(тзМаркированныеТоварыЗаказа);
	
	//Если что-то заполнено уже - второй раз не надо, только сверка
	Если Сборка.Товары.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Об = Сборка.ПолучитьОбъект();
	
	Для Каждого Строчка Из Данные.goods Цикл
		
		НС					 = Об.Товары.Добавить();
		НС.Штрихкод			 = Строчка.barcode;
		НС.Штрихкоды		 = ОбщегоНазначения_Сервер.Сериализовать(Строчка.barcodes);
		НС.Название			 = Строчка.good;
		НС.Количество		 = Строчка.actQuantity;
		НС.КоличествоУчет	 = Строчка.regQuantity;
		НС.Идентификатор	 = Строчка.id;
		
	КонецЦикла;
	
	Об.Записать();
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТоварыСервер_ИнтернетЗаказ()
	
	Данные = API.ПолучитьТоварыДляСборки(ОбщегоНазначения_Сервер.Сериализовать(Новый Структура("type, doc","WebOrder", Сборка.ДокументВыгрузки)));
	
	ДоступнаяМаркировка.Очистить();
	тзМаркированныеТоварыЗаказа = Новый ТаблицаЗначений;
	тзМаркированныеТоварыЗаказа.Колонки.Добавить("Идентификатор");
	
	Для Каждого Строчка Из Данные.marks Цикл
		НС = ДоступнаяМаркировка.Добавить();
		НС.Идентификатор = Строчка.id;
		НС.КодМаркировки = Строчка.code;
		
		НС = тзМаркированныеТоварыЗаказа.Добавить();
		НС.Идентификатор = Строчка.id;
	КонецЦикла;
	
	тзМаркированныеТоварыЗаказа.Свернуть("Идентификатор");
	МаркированныеТовары.Загрузить(тзМаркированныеТоварыЗаказа);
	
	//Если что-то заполнено уже - второй раз не надо, только сверка
	Если Сборка.Товары.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Об = Сборка.ПолучитьОбъект();
	
	Для Каждого Строчка Из Данные.goods Цикл
		
		НС					 = Об.Товары.Добавить();
		НС.Штрихкод			 = Строчка.barcode;
		НС.Штрихкоды		 = ОбщегоНазначения_Сервер.Сериализовать(Строчка.barcodes);
		НС.Название			 = Строчка.good;
		НС.Количество		 = Строчка.actQuantity;
		НС.КоличествоУчет	 = Строчка.regQuantity;
		НС.Размещение		 = Строчка.donor;
		НС.Идентификатор	 = Строчка.id;
		
	КонецЦикла;
	
	Об.Записать();
		
КонецПроцедуры

&НаСервере
Функция ПолучитьВидСборки()
	Возврат Сборка.ВидДокумента;
КонецФункции

&НаСервере
Процедура ОбновитьДанныеПоТоварам(УпорядочитьПоНаличию = Ложь)
	
	Товары.Очистить();
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	СборкаТовары.Штрихкод КАК Штрихкод,
	|	СборкаТовары.Количество КАК Количество,
	|	СборкаТовары.КоличествоУчет КАК КоличествоУчет,
	|	СборкаТовары.Название КАК Название,
	|	СборкаТовары.Размещение КАК Размещение,
	|	СборкаТовары.Идентификатор КАК Идентификатор,
	|	СборкаТовары.КоличествоУчет - СборкаТовары.Количество КАК РазницаУчетФакт
	|ИЗ
	|	Документ.Сборка.Товары КАК СборкаТовары
	|ГДЕ
	|	СборкаТовары.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	СборкаТовары.НомерСтроки,РазницаУчетФакт убыв");
	
	Запрос.Текст = ?(УпорядочитьПоНаличию, СтрЗаменить(Запрос.Текст, "СборкаТовары.НомерСтроки,", ""), СтрЗаменить(Запрос.Текст, ",РазницаУчетФакт убыв", ""));
	
	Запрос.УстановитьПараметр("Ссылка", Сборка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Товары.Добавить(), Выборка);	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗаголовок()
	Возврат Сборка.Название;
КонецФункции

&НаКлиенте
Процедура ОбработатьВводПозиции(пШтрихкод, пКоличество)
	
	ВнестиДанныеПоТоварам(пШтрихкод, пКоличество, "Штрихкод");
	текКоличество = 0;
	
	ОбновитьДанныеПоТоварам();
	
КонецПроцедуры

&НаСервере
Процедура ВнестиДанныеПоТоварам(пПоисковыйРеквизит, пКоличество, пКолонкаПоиска, пКодМаркировки = Неопределено)
	
	
	ОбъектСборка = Сборка.ПолучитьОбъект();
	
	//Вносим товар
	НужныеСтроки = ОбъектСборка.Товары.НайтиСтроки(Новый Структура(пКолонкаПоиска, пПоисковыйРеквизит));
	
	Строчка = ?(НужныеСтроки.Количество() = 0, ОбъектСборка.Товары.Вставить(0), НужныеСтроки[0]);
	
	Если _КонтрольФактическогоКоличества И Строчка.Количество + пКоличество > Строчка.КоличествоУчет Тогда
		Сообщить("Фактическое количество превышает учетное");
		Возврат;
	КонецЕсли;
	
	Строчка[пКолонкаПоиска] = пПоисковыйРеквизит;
	Строчка.Количество = Строчка.Количество + пКоличество;
	
	ОбъектСборка.Товары.Сдвинуть(Строчка, 0-ОбъектСборка.Товары.Индекс(Строчка));
	
	
	//Вносим Маркировку
	Если ЗначениеЗаполнено(пКодМаркировки) Тогда 
		
		НужныеСтроки = ОбъектСборка.МаркированныйТовар.НайтиСтроки(Новый Структура("КодМаркировки", пКодМаркировки));
		
		Если НужныеСтроки.Количество() = 0 Тогда
			НС = ОбъектСборка.МаркированныйТовар.Добавить();
			НС.Идентификатор = пПоисковыйРеквизит;
			НС.КодМаркировки = пКодМаркировки;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбъектСборка.Записать();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТоварыБрак()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	СборкаБракованыеТовары.Штрихкод КАК Штрихкод,
	|	СборкаБракованыеТовары.Количество КАК Количество,
	|	СборкаБракованыеТовары.Описание КАК Описание
	|ИЗ
	|	Документ.Сборка.БракованыеТовары КАК СборкаБракованыеТовары
	|ГДЕ
	|	СборкаБракованыеТовары.Ссылка = &Сборка
	|
	|УПОРЯДОЧИТЬ ПО
	|	СборкаБракованыеТовары.НомерСтроки");
	
	Запрос.УстановитьПараметр("Сборка", Сборка);
	
	ТоварыБрак.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Сообщить("Оповещение "  + ИмяСобытия + ":" + Параметр);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	МенеджерОборудования_Клиент.ОтключитьКомпоненту();
КонецПроцедуры

&НаКлиенте
Процедура СверитьДанные(Команда)
	
	Если ПолучитьВидСборки() = "BarcodeQuantity" Тогда
		ПоказатьПредупреждение(, "В данном режиме сверка недоступна!");
		Возврат;
	КонецЕсли;
	
	ВыполнитьСверку();
	ОбновитьДанныеПоТоварам();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСверку(ЗаполнитьТовары = Истина)
	//УправлениеСборками_Сервер.ВыполнитьСверкуДанныхСЦентром(Сборка);
	//ОткрытьФорму("ОбщаяФорма.ФормаСверкиОбщая", Новый Структура("Сборка, МаркированныеТовары", Сборка, ПолучитьМассивМаркированныхТоваров()));
	ТелоЗапроса = УправлениеСборками_Сервер.СформироватьТелоСборкиДляЗапроса_Сверка(Сборка);
	
	Результат = api.СверитьДанныеПоСборке(ТелоЗапроса);
	
	Если ТипЗнч(Результат) = Тип("Структура") и Результат.Свойство("Ошибка") Тогда
		Сообщить(Результат.Ошибка);
	Иначе
		ЗаполнитьДанныеСверки(Результат, ЗаполнитьТовары);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДанныеИзСборки(пЗначениеПоиска, пКолонкаПоиска)

	
	об = Сборка.ПолучитьОбъект();
	НужныеСтроки = об.Товары.НайтиСтроки(Новый Структура(пКолонкаПоиска, пЗначениеПоиска));
	Для Каждого Строчка Из НужныеСтроки Цикл
		об.Товары.Удалить(Строчка);
	КонецЦикла;
	об.Записать();
	
	
КонецПроцедуры

&НаКлиенте
Процедура Готово(Команда)
	ПоказатьВопрос(Новый ОписаниеОповещения("ОтветГотовностьСборки", ЭтаФорма), "Вы действительно хотите отправить документ в обработку?", РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

&НаКлиенте
Процедура ОтветГотовностьСборки(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		УправлениеСборками_Сервер.ОтработатьСборку(Сборка);
		ЭтаФорма.Закрыть();
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеСверки(Результат, ЗаполнитьТовары)
	
	//Заполняем таблицы поиска: Маркировка
	ДоступнаяМаркировка.Очистить();
	
	Для Каждого Строчка из Результат.marks Цикл
		НС				 = ДоступнаяМаркировка.Добавить();
		НС.КодМаркировки = Строчка.code;
		НС.Идентификатор = Строчка.id;
	КонецЦикла;
		
	//Штрихкоды
	//+ Перезаполняем Сверку по 2 параметрам: ИД и спецШК
	
	тзТовары = Сборка.Товары.Выгрузить();
	
	ТЗДоступныеТовары = ДоступныеТовары.Выгрузить();
	//ТЗДоступныеТовары.Очистить();
	
	Для Каждого Строчка Из Результат.goods Цикл
		
		НужныеСтроки = тзТовары.НайтиСтроки(Новый Структура("Идентификатор,СпецШтрихкод",Строчка.id, ?(ТипЗнч(Строчка.specBarcode)<>Тип("Строка"), "", Строчка.specBarcode)));
		
		Если НужныеСтроки.Количество() = 0 Тогда //Добавляем
			НС				 = тзТовары.Добавить();
			НС.Идентификатор = Строчка.id;
			НС.СпецШтрихкод	 = Строчка.specBarcode;
		Иначе
			НС = НужныеСтроки[0];
		КонецЕсли;
		
		НС.Название		  = Строчка.name;
		НС.КоличествоУчет = Строчка.regQuantity;
		НС.Штрихкоды	  = ОбщегоНазначения_Сервер.Сериализовать(Строчка.barcodes);
		
		Для Каждого ШК Из Строчка.barcodes Цикл 
			НСДТ				 = ТЗДоступныеТовары.Добавить();
			НСДТ.Идентификатор	 = Строчка.id;
			НСДТ.Штрихкод		 = ШК;
			НСДТ.Маркировка		 = Строчка.mark;
			НСДТ.Название		 = Строчка.name;
			НС.Штрихкод			 = ШК;
		КонецЦикла;
		
		Если Строчка.specBarcode <> "" Тогда
			НСДТ				 = ТЗДоступныеТовары.Добавить();
			НСДТ.Идентификатор	 = Строчка.id;
			НСДТ.Штрихкод		 = Строчка.specBarcode;
			НСДТ.Маркировка		 = Строчка.mark;
			НСДТ.Название		 = Строчка.name;
			
			НС.Штрихкод			 = Строчка.specBarcode;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Строчка Из Сборка.Товары Цикл
		
		МассивШК = ОбщегоНазначения_Сервер.ДеСериализовать(Строчка.Штрихкоды);
		
		Для Каждого тШК Из МассивШК Цикл
			
			Если ТЗДоступныеТовары.НайтиСтроки(Новый Структура("Штрихкод", тШК)).Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеПоТовару = ПолучитьДанныеТовараПоШтрихкоду_Сервер(тШК);
			
			Если ЗначениеЗаполнено(ДанныеПоТовару.Идентификатор) Тогда
				НСДТ				 = ТЗДоступныеТовары.Добавить();
				НСДТ.Идентификатор	 = ДанныеПоТовару.Идентификатор;
				НСДТ.Штрихкод		 = тШК;
				НСДТ.Маркировка		 = ДанныеПоТовару.Маркировка;
				НСДТ.Название		 = ДанныеПоТовару.Название;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	//тзТовары.Сдвинуть();
	ТЗДоступныеТовары.Свернуть("Идентификатор, Штрихкод, Маркировка, Название");
	ДоступныеТовары.Загрузить(ТЗДоступныеТовары);
	
	Если ЗаполнитьТовары Тогда
		ОбСборка = Сборка.ПолучитьОбъект();
		ОбСборка.Товары.Загрузить(тзТовары);
		ОбСборка.Записать();
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДокумент(Команда)
	ПоказатьВопрос(Новый ОписаниеОповещения("ПослеВопросаУдалить", ЭтаФорма), "Вы действительно хотите удалить документ?", РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаУдалить(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеСборками_Сервер.УдалитьСборку(Сборка);
	ЭтаФорма.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТовары(Команда)
	ОбновитьДанныеПоТоварам();
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	//Если _КонтрольФактическогоКоличества Тогда
	//	ПоказатьПредупреждение(, "Нельзя удалять строки в данном документе");
	//	Возврат;
	//КонецЕсли;
	//
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	//Если ТекДанные = Неопределено Тогда
	//	ПоказатьПредупреждение(, "Не выбрана строка");
	//	Возврат;
	//КонецЕсли;
	//
	//Если _КонтрольМаркировки И ЭтоМаркированныйТовар(ТекДанные.Идентификатор) Тогда
	//	ПоказатьПредупреждение(, "Нельзя удалять маркированный товар");
	//	Возврат;
	//КонецЕсли;
	
	Если ПолучитьВидСборки() <> "BarcodeQuantity" Тогда
		ПоказатьПредупреждение(,ОбщегоНазначения_Сервер.ПолучитьТекстОшибки("ЗапрещеноУдалениеСтроки"));
		Возврат;
	КонецЕсли;

	ПоказатьВопрос(Новый ОписаниеОповещения("Ответ_УдалитьСтроку", ЭтаФорма, Новый Структура("ШК, ИД", ТекДанные.Штрихкод, ТекДанные.Идентификатор)), "Удалить строку?" + Символы.ПС + ТекДанные.Штрихкод + Символы.ПС + ТекДанные.Название, РежимДиалогаВопрос.ДаНет); 
	
КонецПроцедуры

&НаКлиенте
Процедура Ответ_УдалитьСтроку(Результат, ДопПараметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Если ЗначениеЗаполнено(ДопПараметры.ИД) Тогда
			УдалитьДанныеИзСборки(ДопПараметры.ИД, "Идентификатор");
		Иначе
			УдалитьДанныеИзСборки(ДопПараметры.ШК, "Штрихкод");
		КонецЕсли;
		
		ОбновитьДанныеПоТоварам();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура тест_ДобавитьБрак(Команда)
	ОткрытьФорму("ОбщаяФорма.ФормаВводаБрака", Новый Структура("Сборка, Штрихкод, Количество", Сборка, "4600104040481", 0),,,,,);//Добавить описание оповещения
КонецПроцедуры

&НаСервере
Функция ЭтоМаркированныйТовар(текИД)
	
	Возврат МаркированныеТовары.НайтиСтроки(Новый Структура("Идентификатор", текИД)).Количество() > 0;
	
КонецФункции

Процедура ТоварыКоличествоПриИзмененииНаСервере(текИД, текШК, текКоличество)
	
	Если _КонтрольМаркировки Тогда //По id
		ВнестиДанныеПоТоварам(текИД, текКоличество, "Идентификатор");
	Иначе //по ШК
		ВнестиДанныеПоТоварам(текШК, текКоличество, "Штрихкод");
	КонецЕсли;
	ОбновитьДанныеПоТоварам();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	Если _КонтрольМаркировки И ЭтоМаркированныйТовар(ТекДанные.Идентификатор) ТОгда
		ПоказатьПредупреждение(, "Изменение количества маркированного товара ТОЛЬКО по штрихкоду!");
	Иначе
		ТоварыКоличествоПриИзмененииНаСервере(ТекДанные.Идентификатор, ТекДанные.Штрихкод, ТекДанные.Количество);
	КонецЕсли;
	ОбновитьДанныеПоТоварам();
КонецПроцедуры

&НаСервере
Процедура ОтменаВведённойМаркировкиСервер(пКодМаркировки, пИдентификатор)
	
	НужныеСтроки = Сборка.МаркированныйТовар.НайтиСтроки(Новый Структура("Идентификатор", пИдентификатор));
	
	Если НужныеСтроки.Количество() = 0 Тогда
		Сообщить("Код маркировки не найден в документе");
	Иначе
		УалитьДанныеПоМаркировке(пКодМаркировки, пИдентификатор);
		ВнестиДанныеПоТоварам(пИдентификатор, -1, "Идентификатор", пКодМаркировки);
		ОбновитьДанныеПоТоварам();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УалитьДанныеПоМаркировке(пКодМаркировки, пИдентификатор)
	
	ОбСборка = Сборка.ПолучитьОбъект();
	НужныеСтроки = ОбСборка.МаркированныйТовар.НайтиСтроки(Новый Структура("Идентификатор,КодМаркировки",пИдентификатор,пКодМаркировки));
	
	Для Каждого строчка Из НужныеСтроки Цикл
		ОбСборка.МаркированныйТовар.Удалить(строчка);
	КонецЦикла;
	
	ОбСборка.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаВведённойМаркировки(Результат, ДопПараметры) Экспорт 
	Попытка 
		Если Не ЗначениеЗаполнено(Результат.Ошибка) ТОгда
			ОтменаВведённойМаркировкиСервер(Результат.Код, ДопПараметры.ИД);
			ОбновитьДанныеПоТоварам();
		Иначе
			ПоказатьПредупреждение(, Результат.Ошибка);
		КонецЕсли;
	Исключение
	КонецПопытки;
КонецПроцедуры


&НаКлиенте
Процедура ТестШКПриИзменении(Элемент)
	ВнешнееСобытиеШтрихкод(ТестШК);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимОтмены(Команда)
	
	_РежимОтмены = Не _РежимОтмены;
	Элементы.ТоварыУстановитьРежимОтмены.ЦветТекста = ?(_РежимОтмены, WebЦвета.СветлоЗеленый, WebЦвета.Серый);
	
КонецПроцедуры


&НаКлиенте
Процедура Удалить_Маркировка(Команда)
	ПоказатьВопрос(Новый ОписаниеОповещения("ПослеВопросаУдалить", ЭтаФорма), "Вы действительно хотите удалить документ?", РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

#Область Сканер

#Область Товары

&НаКлиенте
Процедура  ОбработатьВведённыйШК_Товары(пШК)
	
	Если Не ЗначениеЗаполнено(пШК) Тогда
		Возврат;
	КонецЕсли;
	
	ВидСборки = ПолучитьВидСборки();
	ВидКода = МенеджерОборудования_Клиент.ПолучитьВидКода(пШК);
	
	Если ВидКода = "DataMatrix" Тогда
		ПоказатьПредупреждение(, "В данную форму вбиваются только ШК");
		Возврат;
	КонецЕсли;
	
	Если _РежимОтмены тогда
		Если ВидСборки  = "ProductAssembly" ИЛИ ВидСборки  = "WebOrder" ИЛИ ВидСборки  = "Inventory" Тогда
			ШКОтмена_СУчетомМаркировки(пШК);
		ИначеЕсли ВидСборки  = "AcceptanceOfGoods" Тогда
			ШКОтмена_БезУчетаМаркировки(пШК);
		ИначеЕсли ВидСборки  = "BarcodeQuantity" Тогда
			ШКОтмена_ШтрихкодКоличество(пШК);
		КонецЕсли;
	Иначе
		Если ВидСборки  = "ProductAssembly" ИЛИ ВидСборки  = "WebOrder" Тогда
			ШК_СборкаЗаказ(пШК);
		ИначеЕсли ВидСборки  = "AcceptanceOfGoods" Тогда
			ШК_Приёмка(пШК);
		ИначеЕсли ВидСборки  = "Inventory" Тогда
			ШК_Инвентаризация(пШК);
		ИначеЕсли ВидСборки  = "BarcodeQuantity" Тогда
			ШК_ШтрихкодКоличество(пШК);
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьДанныеПоТоварам();
КонецПроцедуры


////Обработчики
&НаКлиенте
Процедура ШКОтмена_СУчетомМаркировки(пШК)
	
	Если НЕ ДанныйШтрихкодПробитВДокумент(пШК) Тогда
		ПоказатьПредупреждение(,ОбщегоНазначения_Сервер.ПолучитьТекстОшибки("ШтрихкодНеВДокументе"));
		Возврат;
	КонецЕсли;
	
	ДанныеТовара = ПолучитьДанныеТовараПоШтрихкоду(пШК);
	
	Если ДанныеТовара.Маркировка И не ЭтоТестер(ДанныеТовара.СпецШК) Тогда
		//ОткрытьФорму("ОбщаяФорма.ФормаВводаМаркировки",,,,,,Новый ОписаниеОповещения("ОбработкаВведённойМаркировки_Отмена", ЭтаФорма,  Новый Структура("ДанныеТовара",ДанныеТовара)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);//Ввод маркировки
		
		//v 2.0
		//Активировать страницу ввода мааркировки
		//и ожидать ввод либо кнопка закрыть
		АктивацияВводаМаркировкиТовара(ДанныеТовара);
	Иначе
		УдалитьДанныеИзТЧТовары(ДанныеТовара.Идентификатор, ДанныеТовара.СпецШК);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШКОтмена_БезУчетаМаркировки(пШК)	
	
	Если НЕ ДанныйШтрихкодПробитВДокумент(пШК) Тогда
		ПоказатьПредупреждение(,ОбщегоНазначения_Сервер.ПолучитьТекстОшибки("ШтрихкодНеВДокументе"));
		Возврат;
	КонецЕсли;
	
	ДанныеТовара = ПолучитьДанныеТовараПоШтрихкоду(пШК);
	УдалитьДанныеИзТЧТовары(ДанныеТовара.Идентификатор, ДанныеТовара.СпецШК);
	
КонецПроцедуры

&НаСервере
Процедура ШКОтмена_ШтрихкодКоличество(пШК)
	
	ОбСборка = Сборка.ПолучитьОбъект();
	
	НужныеСтроки = ОбСборка.Товары.НайтиСтроки(Новый Структура("Штрихкод", пШК));
	
	Если НужныеСтроки.Количество()= 0 Тогда
		Сообщить(ОбщегоНазначения_Сервер.ПолучитьТекстОшибки("ШтрихкодНеВДокументе"));
		Возврат;
	Иначе
		Строчка = НужныеСтроки[0];
	КонецЕсли;
	
	Строчка.Количество = Строчка.Количество - 1;
	
	ОбСборка.Товары.Сдвинуть(Строчка, 0-ОбСборка.Товары.Индекс(Строчка));
	
	ОбСборка.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ШК_СборкаЗаказ(пШК)
	
	Если ЭтоСпецШтрихкод(пШК) ТОгда
		ПоказатьПредупреждение(, ОбщегоНазначения_Сервер.ПолучитьТекстОшибки("НекорректныйШтрихкод"));
		Возврат;
	КонецЕсли;
	
	ДанныеТовара = ПолучитьДанныеТовараПоШтрихкоду_ТабличнаяЧасть(пШК);
	
	Если Не ЗначениеЗаполнено(ДанныеТовара.Идентификатор) Тогда
		ПоказатьПредупреждение(, ОбщегоНазначения_Сервер.ПолучитьТекстОшибки("НеопределённыйТовар", Новый Структура("ШК", пШК)));
		Возврат;
	КонецЕсли;
	
	Если ТоварОтсутствуетВСборке(ДанныеТовара.Идентификатор)		 Тогда	Возврат;	КонецЕсли;
	Если ПревышеноДопустимоеКоличество(ДанныеТовара.Идентификатор)	 Тогда	Возврат;	КонецЕсли;
	
	Если ДанныеТовара.Маркировка Тогда
		//ОткрытьФорму("ОбщаяФорма.ФормаВводаМаркировки",,,,,,Новый ОписаниеОповещения("ОбработкаВведённойМаркировки", ЭтаФорма,  Новый Структура("ДанныеТовара",ДанныеТовара)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);//Ввод маркировки
		АктивацияВводаМаркировкиТовара(ДанныеТовара);
	Иначе
		ВнестиДанныеВТЧТовары(ДанныеТовара.Идентификатор, ДанныеТовара.СпецШК,,,ДанныеТовара.Название, ДанныеТовара.Штрихкоды,ДанныеТовара.Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШК_Приёмка(пШК)
	
	Если ЭтоСпецШтрихкод(пШК) ТОгда
		ПоказатьПредупреждение(, ОбщегоНазначения_Сервер.ПолучитьТекстОшибки("НекорректныйШтрихкод"));
		Возврат;
	КонецЕсли;
	
	ДанныеТовара = ПолучитьДанныеТовараПоШтрихкоду(пШК);
	
	Если Не ЗначениеЗаполнено(ДанныеТовара.Идентификатор) Тогда
		ПоказатьПредупреждение(, ОбщегоНазначения_Сервер.ПолучитьТекстОшибки("НеопределённыйТовар", Новый Структура("ШК", пШК)));
		Возврат;
	КонецЕсли;
	
	ВнестиДанныеВТЧТовары(ДанныеТовара.Идентификатор, ДанныеТовара.СпецШК,,,ДанныеТовара.Название, ДанныеТовара.Штрихкоды, ДанныеТовара.Штрихкод);
	
КонецПроцедуры

&НаКлиенте
Процедура ШК_Инвентаризация(пШК)
	
	ДанныеТовара = ПолучитьДанныеТовараПоШтрихкоду(пШК);
	
	Если Не ЗначениеЗаполнено(ДанныеТовара.Идентификатор) Тогда
		ПоказатьПредупреждение(, ОбщегоНазначения_Сервер.ПолучитьТекстОшибки("НеопределённыйТовар", Новый Структура("ШК", пШК)));
		Возврат;
	КонецЕсли;
	
	Если ДанныеТовара.Маркировка И не ЭтоТестер(ДанныеТовара.СпецШК) Тогда
		//v 1.0
		//ОткрытьФорму("ОбщаяФорма.ФормаВводаМаркировки",,,,,,Новый ОписаниеОповещения("ОбработкаВведённойМаркировки", ЭтаФорма,  Новый Структура("ДанныеТовара",ДанныеТовара)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);//Ввод маркировки
		
		//v 2.0
		//Активировать страницу ввода мааркировки
		//и ожидать ввод либо кнопка закрыть
		АктивацияВводаМаркировкиТовара(ДанныеТовара);
	Иначе
		ВнестиДанныеВТЧТовары(ДанныеТовара.Идентификатор, ДанныеТовара.СпецШК,,,ДанныеТовара.Название,ДанныеТовара.Штрихкоды,пШК);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АктивацияВводаМаркировкиТовара(ДанныеТовара)
	
	Элементы.СтраницаБрак.Видимость = Ложь;
	Элементы.СтраницаОснова.Видимость = Ложь;
	Элементы.СтраницаМаркировка.Видимость = Ложь;
	Элементы.СтраницаВводМаркировки.Видимость = Истина;
	Элементы.Страницы.ТекущаяСтраница = ЭтаФорма.Элементы.СтраницаВводМаркировки;
	
	текДанныеТовара = ДанныеТовара;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВведённуюМаркировкуПоТовару(пКодДатаМатрикс)
	
	Если НЕ _РежимОтмены ТОгда
		ОбработкаВведённойМаркировки(Новый Структура("Код", пКодДатаМатрикс), Новый Структура("ДанныеТовара", текДанныеТовара));
	Иначе
		ОбработкаВведённойМаркировки_Отмена(Новый Структура("Код", пКодДатаМатрикс), Новый Структура("ДанныеТовара", текДанныеТовара));
	КонецЕсли;
	
	ОбновитьВидимостьЭлементов(ПолучитьВидСборки());
	текДанныеТовара = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ШК_ШтрихкодКоличество(пШК, пКоличество = 1, Замещать = Ложь)
	
	ОбСборка = Сборка.ПолучитьОбъект();
	
	НужныеСтроки = ОбСборка.Товары.НайтиСтроки(Новый Структура("Штрихкод", пШК));
	
	Если НужныеСтроки.Количество()= 0 Тогда
		Строчка = ОбСборка.Товары.Добавить();
		Строчка.Штрихкод = пШК;
	Иначе
		Строчка = НужныеСтроки[0];
	КонецЕсли;
	
	Если Замещать Тогда
		Строчка.Количество = пКоличество;
	Иначе
		Строчка.Количество = Строчка.Количество + пКоличество;
	КонецЕсли;
	
	ОбСборка.Товары.Сдвинуть(Строчка, 0-ОбСборка.Товары.Индекс(Строчка));
	
	ОбСборка.Записать();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДанныеИзТЧТовары(ИД, СпецШК, КМ = "")
	
	ОбСборка = Сборка.ПолучитьОбъект();
	
	НужныеСтроки = ОбСборка.Товары.НайтиСтроки(Новый Структура("Идентификатор, СпецШтрихкод", ИД, СпецШК));
	
	Если НужныеСтроки.Количество() > 0 Тогда
		Строчка = НужныеСтроки[0];
		Строчка.Количество = Строчка.Количество - 1;
		ОбСборка.Товары.Сдвинуть(Строчка, 0-ОбСборка.Товары.Индекс(Строчка));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КМ) Тогда
		
		НужныеСтроки = ОбСборка.МаркированныйТовар.НайтиСтроки(Новый Структура("КодМаркировки", КМ));
		
		Для Каждого Строчка Из НужныеСтроки Цикл
			ОбСборка.МаркированныйТовар.Удалить(Строчка);
		КонецЦикла;
		
	КонецЕсли;
	
	ОбСборка.Записать();
КонецПроцедуры

&НаСервере
Процедура ВнестиДанныеВТЧТовары(ИД, СпецШК, КМ = "", КИЗ = "", Название = "", Штрихкоды = "", Штрихкод = "")
	
	ОбСборка = Сборка.ПолучитьОбъект();
	
	НужныеСтроки = ОбСборка.Товары.НайтиСтроки(Новый Структура("Идентификатор, СпецШтрихкод", ИД, СпецШК));
	
	Если НужныеСтроки.Количество() =0 Тогда 
		Строчка					 = ОбСборка.Товары.Добавить();
		Строчка.Идентификатор	 = ИД;
		Строчка.СпецШтрихкод	 = СпецШК;
		Строчка.Название		 = ?(Название = "", Строчка.Название, Название);
		Строчка.Штрихкоды		 = ?(Штрихкоды = "", Строчка.Штрихкоды, Штрихкоды);
		Строчка.Штрихкод		 = Штрихкод;
	Иначе
		Строчка = НужныеСтроки[0];
	КонецЕсли;
	
	Строчка.Количество = Строчка.Количество + 1;
	
	
	ОбСборка.Товары.Сдвинуть(Строчка, 0-ОбСборка.Товары.Индекс(Строчка));
	
	Если КМ <> "" и КИЗ <> "" Тогда
		
		НужныеСтроки = ОбСборка.МаркированныйТовар.НайтиСтроки(Новый Структура("КодМаркировки", КМ));
		
		Для Каждого Строчка Из НужныеСтроки Цикл
			ОбСборка.МаркированныйТовар.Удалить(Строчка);
		КонецЦикла;
		
		Строчка					 = ОбСборка.МаркированныйТовар.Добавить();
		Строчка.Идентификатор	 = ИД;
		Строчка.КодМаркировки	 = КМ;
		Строчка.ПолныйКод		 = КИЗ;
		
	КонецЕсли;
	
	ОбСборка.Записать();
	
КонецПроцедуры

&НаСервере
Функция ДобавитьДанныеВТаблицуДоступныеТовары(Результат)
	Для Каждого ШК Из Результат.barcodes Цикл
		НС = ДоступныеТовары.Добавить();
		НС.Название = Результат.name;
		НС.Идентификатор = Результат.id;
		НС.Штрихкод = ШК;
		НС.Маркировка = Результат.mark;
	КонецЦикла;
КонецФункции

&НаКлиенте
Процедура ОбработкаВведённойМаркировки_Отмена(Результат, ДопПараметры) Экспорт 
	
	ДанныеТовара = ДопПараметры.ДанныеТовара;
	
	Если Результат = Неопределено Тогда
		МенеджерОборудования_Клиент.ВоспроизвестиЗвук("Звук_НеправильныйШтрихкод");
		ПоказатьПредупреждение(,ОбщегоНазначения_Сервер.ПолучитьТекстОшибки("НеВведенаМаркировка"));
		Возврат;
	КонецЕсли;
	
	КИЗ				 = Результат.Код;
	КодМаркировки	 = МенеджерОборудования_Клиент.НормироватьКодDataMatrix(Результат.Код);

	Если НЕ КодМаркировкиУжеВведён(КодМаркировки)	 Тогда
		МенеджерОборудования_Клиент.ВоспроизвестиЗвук("Звук_НеправильныйШтрихкод");
		ПоказатьПредупреждение(, ОбщегоНазначения_Сервер.ПолучитьТекстОшибки("МаркировкаЕщёНеВведена"));
		Возврат; 
	КонецЕсли;
	
	Если КодМаркировкиПринадлежитДругомуТовару(КодМаркировки, ДанныеТовара.Идентификатор) Тогда
		МенеджерОборудования_Клиент.ВоспроизвестиЗвук("Звук_НеправильныйШтрихкод");
		ПоказатьПредупреждение(, ОбщегоНазначения_Сервер.ПолучитьТекстОшибки("ЧужойКодМаркировки"));
		Возврат; 
	КонецЕсли;
	
	УдалитьДанныеИзТЧТовары(ДанныеТовара.Идентификатор, ДанныеТовара.СпецШК, КодМаркировки);
	
	
	ОбновитьДанныеПоТоварам();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВведённойМаркировки(Результат, ДопПараметры) Экспорт 
	
	//Попытка 
	//	Если Не ЗначениеЗаполнено(Результат.Ошибка) ТОгда
	//		ВнестиДанныеПоТоварам(ДопПараметры.ИД, 1, "Идентификатор", Результат.Код);
	//		ОбновитьДанныеПоТоварам();
	//	Иначе
	//		ПоказатьПредупреждение(, Результат.Ошибка);
	//	КонецЕсли;
	//Исключение
	//КонецПопытки;
	
	ДанныеТовара = ДопПараметры.ДанныеТовара;
	
	Если Результат = Неопределено Тогда
		МенеджерОборудования_Клиент.ВоспроизвестиЗвук("Звук_НеправильныйШтрихкод");
		ПоказатьПредупреждение(,ОбщегоНазначения_Сервер.ПолучитьТекстОшибки("НеВведенаМаркировка"));
		Возврат;
	КонецЕсли;
	
	КИЗ				 = Результат.Код;
	КодМаркировки	 = МенеджерОборудования_Клиент.НормироватьКодDataMatrix(Результат.Код);
		
	Если КодМаркировкиУжеВведён(КодМаркировки)	 Тогда 
		МенеджерОборудования_Клиент.ВоспроизвестиЗвук("Звук_НеправильныйШтрихкод");
		ПоказатьПредупреждение(, ОбщегоНазначения_Сервер.ПолучитьТекстОшибки("МаркировкаУжеПрисутствует"));
		Возврат; 
	КонецЕсли;
	
	Если Не КодМаркировкиДоступен(КодМаркировки) Тогда 
		МенеджерОборудования_Клиент.ВоспроизвестиЗвук("Звук_НеправильныйШтрихкод");
		ПоказатьПредупреждение(, ОбщегоНазначения_Сервер.ПолучитьТекстОшибки("НеопределённыйКодМаркировки"));
		Возврат; 
	КонецЕсли;
	
	Если КодМаркировкиПринадлежитДругомуТовару(КодМаркировки, ДанныеТовара.Идентификатор) Тогда 
		МенеджерОборудования_Клиент.ВоспроизвестиЗвук("Звук_НеправильныйШтрихкод");
		ПоказатьПредупреждение(, ОбщегоНазначения_Сервер.ПолучитьТекстОшибки("ЧужойКодМаркировки"));
		Возврат; 
	КонецЕсли;
	
	ВнестиДанныеВТЧТовары(ДанныеТовара.Идентификатор, ДанныеТовара.СпецШК,КодМаркировки,КИЗ,ДанныеТовара.Название, ДанныеТовара.Штрихкоды, ДанныеТовара.Штрихкод);

	
	ОбновитьДанныеПоТоварам();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИдентификаторПоШКПоИзвестнымДанным(пШК)
	
	Результат = "";
	
	НужныеСтроки = ДоступныеТовары.НайтиСтроки(Новый Структура("Штрихкод", пШК));
	
	Для Каждого Строчка Из НужныеСтроки Цикл 
		Результат = Строчка.Идентификатор;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

//Проверки
&НаСервере
Функция ДанныйШтрихкодПробитВДокумент(пШК)
	
	Результат = Ложь;
	
	ИД = ПолучитьИдентификаторПоШКПоИзвестнымДанным(пШК);
	
	Если Не ЗначениеЗаполнено(ИД) Тогда
		Возврат Результат;
	КонецЕсли;
	
	НужныеСтроки = Сборка.Товары.НайтиСтроки(Новый Структура("Идентификатор", ИД));
	
	Если НужныеСтроки.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Возврат НужныеСтроки[0].Количество >0;
	
КонецФункции

&НаСервере
Функция ЭтоТестер(сШК)
	Результат = Ложь;
	Если Прав(сШК, 2) = "-5" И Лев(сШК, 1) = "!" ТОгда
		Результат = Истина;
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьДанныеТовараПоШтрихкоду(пШК)
	
	ДанныеТовара = ПолучитьДанныеТовараПоШтрихкодуСервер(пШК);
	
	Если Не ЗначениеЗаполнено(ДанныеТовара.Идентификатор) Тогда
		МенеджерОборудования_Клиент.ВоспроизвестиЗвук("Звук_НеправильныйШтрихкод");
	КонецЕсли;	

	Возврат ДанныеТовара;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеТовараПоШтрихкодуСервер(пШК)
	
	ДанныеТовара = ПолучитьДанныеТовараПоШтрихкоду_ТабличнаяЧасть(пШК);
	
	Если Не ЗначениеЗаполнено(ДанныеТовара.Идентификатор) Тогда
		ДанныеТовара = ПолучитьДанныеТовараПоШтрихкоду_Сервер(пШК);
	КонецЕсли;
	
	//#Если МобильноеПриложениеКлиент Тогда
	//	Если Не ЗначениеЗаполнено(ДанныеТовара.Идентификатор) Тогда
	//		СредстваМультимедиа.ВоспроизвестиЗвуковоеОповещение("bjr_wrong_barcode",истина);
	//		//СредстваМультимедиа.ВоспроизвестиТекст("Штрихкод не найден", "ru-RU") 
	//	КонецЕсли;
	//#КонецЕсли

	Возврат ДанныеТовара;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеТовараПоШтрихкоду_ТабличнаяЧасть(пШК)
	
	Результат = Новый Структура("Название, Идентификатор, Штрихкод, СпецШК, Маркировка, Штрихкоды", "", "", "", "", Ложь, "");
	
	НужныеСтроки = ДоступныеТовары.НайтиСтроки(Новый Структура("Штрихкод", пШК));
	
	Если НужныеСтроки.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(Результат, НужныеСтроки[0]);
		Результат.СпецШК = ?(ЭтоСпецШтрихкод(пШК), пШК, "");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеТовараПоШтрихкоду_Сервер(пШК)
	
	Данные = Новый Структура("Название, Идентификатор, Штрихкод, СпецШК, Маркировка, Штрихкоды", "", "", "", "", Ложь, "");
	Результат = api.ПолучитьИнформациюОТоваре(ОбщегоНазначения_Сервер.Сериализовать(Новый Структура("barcode", пШК)));
	
	Если ТипЗнч(Результат) = Тип("Структура") и Результат.Свойство("Ошибка") Тогда
		Сообщить(Результат.Ошибка);
	Иначе
		Если ЗначениеЗаполнено(Результат.id) Тогда
			ДобавитьДанныеВТаблицуДоступныеТовары(Результат);
			Данные.Название		 = Результат.name;
			Данные.Идентификатор = Результат.id;
			Данные.Штрихкод		 = Результат.barcode;
			Данные.СпецШК		 = Результат.specBarcode;
			Данные.Маркировка	 = Результат.mark;
			Данные.Штрихкоды	 = ОбщегоНазначения_Сервер.Сериализовать(Результат.barcodes);
		КонецЕсли;
	КонецЕсли;

	Возврат Данные;
	
КонецФункции

&НаСервере
Функция КодМаркировкиПринадлежитДругомуТовару(пКодМаркировки, пИдентификатор)
	
	Возврат ДоступнаяМаркировка.НайтиСтроки(Новый Структура("КодМаркировки, Идентификатор", пКодМаркировки, пИдентификатор)).Количество() = 0;
	
КонецФункции

&НаСервере
Функция КодМаркировкиУжеВведён(КодДМ)
	
	Результат = Ложь;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	СборкаМаркированныйТовар.Идентификатор КАК Идентификатор
	|ИЗ
	|	Документ.Сборка.МаркированныйТовар КАК СборкаМаркированныйТовар
	|ГДЕ
	|	СборкаМаркированныйТовар.КодМаркировки ПОДОБНО &КодМаркировки
	|	И СборкаМаркированныйТовар.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("КодМаркировки", КодДМ);
	Запрос.УстановитьПараметр("Ссылка", Сборка);
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТоварОтсутствуетВСборке(идТовара)
	
	Результат = Ложь;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	СборкаТовары.Количество КАК Количество
	|ИЗ
	|	Документ.Сборка.Товары КАК СборкаТовары
	|ГДЕ
	|	СборкаТовары.Ссылка = &Ссылка
	|	И СборкаТовары.Идентификатор ПОДОБНО &Идентификатор");
	
	Запрос.УстановитьПараметр("Идентификатор", идТовара);
	Запрос.УстановитьПараметр("Ссылка", Сборка);
	
	Если Запрос.Выполнить().Пустой() Тогда
		Сообщить("Данный товар отсутствует в сборке");
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПревышеноДопустимоеКоличество(идТовара)
	
	Результат = Ложь;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	СборкаТовары.Количество КАК Количество
	|ИЗ
	|	Документ.Сборка.Товары КАК СборкаТовары
	|ГДЕ
	|	СборкаТовары.Ссылка = &Ссылка
	|	И СборкаТовары.КоличествоУчет <= СборкаТовары.Количество
	|	И СборкаТовары.Идентификатор ПОДОБНО &Идентификатор");
	
	Запрос.УстановитьПараметр("Идентификатор", идТовара);
	Запрос.УстановитьПараметр("Ссылка", Сборка);
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		Сообщить("Превышено допустимое количество товара");
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция КодМаркировкиДоступен(КодДМ)
	Возврат ДоступнаяМаркировка.НайтиСтроки(Новый Структура("КодМаркировки", КодДМ)).Количество()>0;
КонецФункции

&НаСервере
Функция ЭтоСпецШтрихкод(Код)
	
	Возврат ОбщегоНазначения_Сервер.ШтрихкодУценки(Код);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Маркировка

&НаСервере
Процедура ВвестиКодМаркировкиВДокумент(пКод, пКИЗ)
	
	ОбСборка = Сборка.ПолучитьОбъект();
	
	НужныеСтроки = ОбСборка.Маркировка.НайтиСтроки(Новый Структура("КодМаркировки",пКод));
	
	Если НужныеСтроки.Количество() = 0 Тогда
		
		Сообщить("Код маркировки не найден");
		
	Иначе
		
		Для Каждого Строчка Из НужныеСтроки Цикл
			Строчка.Отработан = Истина;
			Строчка.ПолныйКод = пКИЗ;
			ОбСборка.Товары.Сдвинуть(Строчка, 0-ОбСборка.Товары.Индекс(Строчка));
		КонецЦикла;
		
		ОбСборка.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Готово_Маркировка(Команда)
	
	УправлениеСборками_Сервер.ОтработатьСборку(Сборка);
	ЭтаФорма.Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуМаркировка()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	СборкаМаркировка.КодМаркировки КАК КодМаркировки,
	|	СборкаМаркировка.Название КАК Название,
	|	СборкаМаркировка.Идентификатор КАК Идентификатор,
	|	СборкаМаркировка.Отработан КАК Отработан,
	|	СборкаМаркировка.ПолныйКод КАК ПолныйКод,
	|	СборкаМаркировка.Штрихкоды КАК Штрихкоды
	|ИЗ
	|	Документ.Сборка.Маркировка КАК СборкаМаркировка
	|ГДЕ
	|	СборкаМаркировка.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	СборкаМаркировка.НомерСтроки");
	
	Запрос.УстановитьПараметр("Ссылка", Сборка);
	
	МаркировкаИнвентаризация.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура Сверить_Маркировка(Команда)
	УправлениеСборками_Сервер.ЗаполнитьМаркировку(Сборка);
	ОбновитьТаблицуМаркировка();
КонецПроцедуры

&НаКлиенте
Процедура МаркировкаИнвентаризацияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ВыбраннаяСтрока = Элемент.ДанныеСтроки(ВыбраннаяСтрока);
	ОткрытьФорму("ОбщаяФорма.ФормаСверкиДетальная", Новый Структура("_Маркировка, Товар, Штрихкоды", Истина, ВыбраннаяСтрока.Название, ВыбраннаяСтрока.Штрихкоды));
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОбработкаПерехода(ОбъектПерехода, СтандартнаяОбработка)
	//Вставить содержимое обработчика
КонецПроцедуры

&НаСервере
Функция ПолучитьШтрихкодыПоИД(пИдентификатор)
	
	НужныеСтроки = ДоступныеТовары.НайтиСтроки(Новый Структура("Идентификатор", пИдентификатор));
	
	МассивШК = Новый Массив;
	
	Для Каждого Строчка Из НужныеСтроки Цикл
		МассивШК.Добавить(Строчка.Штрихкод);
	КонецЦикла;
	
	Возврат МассивШК;
	
КонецФункции

&НаСервере
Функция ПолучитьНазваниеПоИД(пИдентификатор)
	
	Результат = "";
	
	НужныеСтроки = ДоступныеТовары.НайтиСтроки(Новый Структура("Идентификатор", пИдентификатор));
	
	Для Каждого Строчка Из НужныеСтроки Цикл
		Результат = Строчка.Название;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Строчка = Элемент.ДанныеСтроки(ВыбраннаяСтрока);
	
	Если  ПолучитьВидСборки() = "BarcodeQuantity" Тогда
		тКолво = 0;
		ПоказатьВводЧисла(Новый ОписаниеОповещения("ВводКоличестваРежимШККолво", ЭтаФорма, НОвый Структура("ШК", Строчка.Штрихкод)), тКолво, "Введите количество товара");
	Иначе
		Штрихкоды = ПолучитьШтрихкодыПоИД(Строчка.Идентификатор);
		ОткрытьФорму("ОбщаяФорма.ФормаСверкиДетальная", НОвый Структура("МаркированныеТовары, 				   Идентификатор, 		  Штрихкоды, 																Сборка, Товар, 										 Штрихкод, 															 _Маркировка, 								   СпецШтрихкод", 
																		 ПолучитьМассивМаркированныхТоваров(), Строчка.Идентификатор, ОбщегоНазначения_Сервер.ПолучитьСтроковоеПредставлениеМассива(Штрихкоды), Сборка, ПолучитьНазваниеПоИД(Строчка.Идентификатор), ?(ЭтоСпецШтрихкод(Строчка.Штрихкод),Строчка.Штрихкод,Штрихкоды[0]), ЭтоМаркированныйТовар(Строчка.Идентификатор), ?(ЭтоСпецШтрихкод(Строчка.Штрихкод), Строчка.Штрихкод, "")),,,,,Новый ОписаниеОповещения("ЗакрытиеДетальнойСверки", ЭтаФорма));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеДетальнойСверки(Результат, ДОпПараметры) Экспорт
	ОбновитьДанныеПоТоварам();
КонецПроцедуры

&НаКлиенте
Процедура ВводКоличестваРежимШККолво(Результат, ДопПараметры) Экспорт 
	ШК_ШтрихкодКоличество(ДопПараметры.ШК, Результат, Истина);
	ОбновитьДанныеПоТоварам();
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивМаркированныхТоваров()
	
	маркТовары = ДоступныеТовары.НайтиСтроки(Новый Структура("Маркировка", Истина));
	
	мТовары = Новый Массив;
	Для Каждого Элемент из маркТовары Цикл
		мТовары.Добавить(Элемент.Идентификатор);
	КонецЦикла;
	
	Возврат мТовары;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьБракБезШтрихкода(Команда)
	ОткрытьФорму("ОбщаяФорма.ФормаВводаБрака", Новый Структура("Сборка, Штрихкод, Количество", Сборка, "<без ШК>", 0),,,,,Новый ОписаниеОповещения("ЗакрытиеФормыВводаБрака", ЭтаФорма));//Добавить описание оповещения
КонецПроцедуры

&НаКлиенте
Процедура СортировкаПоНаличию(Команда)
	ОтсортироватьСборкуПоНаличию();
	ОбновитьДанныеПоТоварам(Истина);
КонецПроцедуры

&НаСервере
Процедура ОтсортироватьСборкуПоНаличию()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	СборкаТовары.Штрихкод КАК Штрихкод,
	|	СборкаТовары.Название КАК Название,
	|	СборкаТовары.Количество КАК Количество,
	|	СборкаТовары.КоличествоУчет КАК КоличествоУчет,
	|	СборкаТовары.Комментарий КАК Комментарий,
	|	СборкаТовары.Штрихкоды КАК Штрихкоды,
	|	СборкаТовары.Размещение КАК Размещение,
	|	СборкаТовары.Идентификатор КАК Идентификатор,
	|	СборкаТовары.СпецШтрихкод КАК СпецШтрихкод,
	|	ВЫБОР
	|		КОГДА СборкаТовары.КоличествоУчет = СборкаТовары.Количество
	|			ТОГДА 2
	|		КОГДА СборкаТовары.КоличествоУчет < СборкаТовары.Количество
	|			ТОГДА 1
	|		КОГДА СборкаТовары.КоличествоУчет > СборкаТовары.Количество
	|			ТОГДА 0
	|	КОНЕЦ КАК Поле1
	|ИЗ
	|	Документ.Сборка.Товары КАК СборкаТовары
	|ГДЕ
	|	СборкаТовары.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Поле1");
	
	Запрос.УстановитьПараметр("Ссылка", Сборка);
	
	тзТовары = Запрос.Выполнить().Выгрузить();
	
	ОбСборка = Сборка.ПолучитьОбъект();
	ОбСборка.Товары.Загрузить(тзТовары);
	ОбСборка.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыБракВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОткрытьФорму("ОбщаяФорма.ФормаБракаДетальная", Новый Структура("Сборка, Индекс", Сборка, ВыбраннаяСтрока));
КонецПроцедуры

&НаКлиенте
Процедура ВвестиШКВручную(Команда)
	тСтрока = "";
	ПоказатьВводСтроки(Новый ОписаниеОповещения("ПослеВводаШКВручную", ЭтаФорма), тСтрока, "Введите штрихкод");
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаШКВручную(Результат, ДопПараметры) Экспорт
	
	ОбработатьВведённыйШК_Товары(СтрЗаменить(Результат, " ", ""));
	
КонецПроцедуры

&НаКлиенте
Процедура тестВводМаркировки(Команда)
	ОбработатьВведённуюМаркировкуПоТовару(тестМаркировка);
КонецПроцедуры
